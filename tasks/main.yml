---
- include: compat_ansible_admin_group.yml
  when: ansible_admin_group is defined

- name: Verify that the groups are all defined
  fail:
    msg: "ansible_admins_group is defined while ansible_committers_group is not"
  when: ansible_admins_group is defined and ansible_committers_group is undefined

- name: Fail is old option are used
  fail:
    msg: "allow_ansible_commands is deprecated, please see ansible_admins_group in README.md"
  when: allow_ansible_commands is defined

- name: Install tools
  package:
    name:
    - git
    - sudo
    state: present

- name: Install socat
  package:
    name: socat
    state: present
  when: enable_onion_support or use_tor_proxy

- name: Create ansible user {{ ansible_username }}
  user:
    name: "{{ ansible_username }}"
    generate_ssh_key: yes
    ssh_key_type: "{{ ssh_key_type }}"

- name: Create {{ ansible_admins_group }} group
  group:
    name: "{{ ansible_admins_group }}"
  when: ansible_admins_group is defined

- name: Create {{ ansible_committers_group }} group
  group:
    name: "{{ ansible_committers_group }}"
  when: ansible_committers_group is defined

- include: install_ansible_rpm.yml
  when: not use_ansible_git

- include: install_ansible_git.yml
  when: use_ansible_git

- name: Setup ssh config for {{ ansible_username }}
  template:
    dest: "~{{ ansible_username }}/.ssh/config"
    src: ssh_config

- name: Setup ansible.cfg
  template:
    dest: /etc/ansible/ansible.cfg
    src: ansible.cfg
    mode: 0755

- name: Setup the bastion configuration file
  template:
    dest: /etc/ansible_bastion.yml
    src: ansible_bastion.yml
    mode: 0644

- name: Create cache folder {{ cache_folder }}
  file:
    path: "{{ cache_folder }}"
    state: directory
    owner: "{{ ansible_username }}"
    mode: 0755

- name: Add sudo config for admins
  template:
    dest: "/etc/sudoers.d/{{ ansible_committers_group }}_cmd_config"
    src: cmd_config.sudoers
    validate: 'visudo -cf %s'
  when: ansible_committers_group is defined

- include: create_repos.yml

- include: install_callback_plugins.yml

- name: Add post-receive hook to checkout playbooks
  template:
    dest: "{{ git_repositories_dir }}/{{ item }}/hooks/post-receive.d/00_update_checkout.sh"
    src: hooks/update_checkout.sh
    mode: 0755
  with_items:
  - public
  - private

- name: Add post-receive hook to trigger a run
  template:
    dest: "{{ git_repositories_dir }}/public/hooks/post-receive.d/01_trigger_run.sh"
    src: hooks/trigger_run.sh
    mode: 0755

- include: pre_receive_checks.yml

- name: Deploy various helper scripts
  copy:
    src: "{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: 0755
  with_items:
  - checkout_git_repos.sh
  - ansible_run_all.sh
  - generate_ansible_command.py
  - update_galaxy.sh
  - update_ansible_config.sh
  - ansible_local.py
  - clean_ssh_public_keys.py

- name: Deploy the library of function for bastion
  copy:
    src: bastion_lib.py
    dest: /usr/local/lib/bastion_lib.py

- name: Deploy various sudo configs
  template:
    src: "{{ item }}.sudoers"
    dest: "/etc/sudoers.d/{{ item }}"
    validate: 'visudo -cf %s'
    mode: 'ug+r'
  with_items:
  - update_galaxy
  - ansible_local

- name: Deploy various scripts
  template:
    src: "{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
    mode: 0755
  with_items:
  - file_changed_commit.sh
  - rerun_last_commit.sh

- name: Add cron to merge change in git to /etc/ansible
  cron:
    name: "merge git {{ git_repositories_dir }}"
    job: "/usr/local/bin/checkout_git_repos.sh {{ git_repositories_dir }}"
    minute: "*/5"

- name: Add cron to run ansible change every night
  cron:
    name: "ansible run"
    user: "{{ ansible_username }}"
    job:  /usr/local/bin/ansible_run_all.sh
    minute: "{{ ansible_run_minute | default(omit) }}"
    hour:   "{{ ansible_run_hour | default(omit) }}"

- name: Add cron to update the modules every 6h
  cron:
    name: "ansible galaxy update"
    user: "{{ ansible_username }}"
    job:  "sudo /usr/local/bin/update_galaxy.sh"
    hour:   "*/6"
    minute: 0

- include: git_shell.yml
  when: use_git_shell

- include: push_remote.yml
  when: remotes|length > 0

- include: use_tor_proxy.yml
  when: use_tor_proxy
